; >>>> begin comments
;==========================================================================================
;
; >>>> McObject Class: sdi2k_math_spekplot
;
; This file contains the McObject method code for sdi2k_math_spekplot objects:
;
; Mark Conde Fairbanks, October 2000.
;
; >>>> end comments
; >>>> begin declarations
;         menu_name = Spectrum Plotter
;        class_name = sdi2k_math_spekplot
;       description = SDI Analysis - Plot Spectra
;           purpose = SDI analysis
;       idl_version = 5.2
;  operating_system = Windows NT4.0 terminal server 
;            author = Mark Conde
; >>>> end declarations

@sdi2k_ncdf.pro

;==========================================================================================
; This is the (required) "new" method for this McObject:

pro sdi2k_math_spekplot_new, instance, dynamic=dyn, creator=cmd
;---First, properties specific to this object:
    cmd = 'instance = {sdi2k_math_spekplot, '
    cmd = cmd + 'specific_cleanup: ''sdi2k_math_spekplot_specific_cleanup'', '    
    spekplot_behavior = {spekplot_behavior, prompt_for_filename: 1, $
                          menu_configurable: 0, $
                              user_editable: [1]} 
    spekplot_cfg = {spefplot_cfg,    xshift: 0., $
                            show_background: 0, $
                          menu_configurable: 1, $
                              user_editable: [0,1]} 
    cmd = cmd + 'behavior: spekplot_behavior, '
    cmd = cmd + 'displacements: spekplot_cfg, '
    cmd = cmd + 'record: 0, '
;---Now add fields common to all SDI objects. These will be grouped as sub-structures:
    sdi2k_common_fields, cmd, automation=automation, geometry=geometry
;---Next, add the required fields, whose specifications are read from the 'declarations'
;   section of the comments at the top of this file:
    whoami, dir, file    
    obj_reqfields, dir+file, cmd, dynamic=dyn
;---Now, create the instance:
    status = execute(cmd)
end

;==========================================================================================
; This is the event handler for events generated by the sdi2k_math_spekplot object:
pro sdi2k_math_spekplot_event, event
    common spekplot_tlist, tlist
    widget_control, event.top, get_uvalue=info
    wid_pool, 'Settings: ' + info.wtitle, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=spekplot_settings
    if widget_info(event.id, /valid_id) and spekplot_settings.automation.show_on_refresh then widget_control, event.id, /show

;---Check for a timer tick:    
    if tag_names(event, /structure_name) eq 'WIDGET_TIMER' then begin
       sdi2k_math_spekplot_tik, info.wtitle
       if spekplot_settings.automation.timer_ticking then widget_control, sidx, timer=spekplot_settings.automation.timer_interval
       return
    endif
    
;---Get the menu name for this event:
    widget_control, event.id, get_uvalue=menu_item 
    if menu_item eq 'View|Next' then begin
       spekplot_settings.record = spekplot_settings.record + 1
       widget_control, sidx, set_uvalue=spekplot_settings
    endif 

    if menu_item eq 'View|Previous' then begin
       spekplot_settings.record = spekplot_settings.record - 1
       widget_control, sidx, set_uvalue=spekplot_settings
    endif 

    if menu_item eq 'View|Time Chooser' then begin
       mcchoice, 'Exposure central time:', tlist, choice
       spekplot_settings.record = choice.index
       widget_control, sidx, set_uvalue=spekplot_settings
    endif 

    if menu_item eq 'View|Movie' then begin
       for j=0,n_elements(tlist)-2 do begin
           spekplot_settings.record = j
           widget_control, sidx, set_uvalue=spekplot_settings
           sdi2k_math_spekplot_plot, info.wtitle
       endfor
    endif 

    sdi2k_math_spekplot_plot, info.wtitle
    if n_elements(menu_item) eq 0 then menu_item = 'Nothing valid was selected'
end

;==========================================================================================
; This is the routine that handles timer ticks:
pro sdi2k_math_spekplot_tik, wtitle, redraw=redraw, _extra=_extra
@sdi2kinc.pro
    sdi2k_math_spekplot_plot, wtitle
end

pro sdi2k_math_spekplot_plot, wtitle
@sdi2kinc.pro
;---Get settings information for this instance of the output xwindow and this instance of 
;   the plot program itself:
    wid_pool, wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=info
    wid_pool, 'Settings: ' + wtitle, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=spekplot_settings

    if n_elements(zone_canvas) eq 0 then return
    record = spekplot_settings.record
    sdi2k_read_exposure, host.netcdf(0).ncid, record

    if !d.name ne 'Z' and !d.name ne 'PS' then wset, info.wid
;---Display the zone map as a background for the spectra plots:
    tv, zone_canvas
 
    xyouts, 0.05, 0.95, 'Exposure: ' + strcompress(string(record)), $
            align=0, /normal, color=host.colors.white, charthick=3, charsize=2
    xyouts, 0.95, 0.95, 'Scans: ' + strcompress(string(1+host.programs.spectra.etalon_scans)), $
            align=1, /normal, color=host.colors.white, charthick=3, charsize=2
            
    tstrt = dt_tm_mk(js2jd(0d)+1, host.programs.spectra.start_time, format='0d$ n$ Y$, h$:m$')            
    xyouts, 0.03, 0.03, tstrt, $
            align=0, /normal, color=host.colors.white, charthick=3, charsize=2
    tend  = dt_tm_mk(js2jd(0d)+1, host.programs.spectra.start_time + $
                                  host.programs.spectra.integration_seconds, format='0d$ n$ Y$, h$:m$')            
    xyouts, 0.98, 0.03, tend, $
            align=1, /normal, color=host.colors.white, charthick=3, charsize=2

;---Now plot the current spectra:
    nz = total(host.operation.zones.sectors(0:host.operation.zones.fov_rings-1))
    for zidx=0,nz-1 do begin
  xtwk = 0.22/host.operation.zones.fov_rings
  ytwk = 0.18/host.operation.zones.fov_rings
  edge = [0.5, 0.5]
  j=zidx
  lolef = [1.05*zone_centers(j, 0) - xtwk, zone_centers(j, 1) - ytwk] + edge
  uprgt = [1.05*zone_centers(j, 0) + xtwk, zone_centers(j, 1) + ytwk] + edge
  cell  = [lolef(0:1), uprgt(0:1)] 
  !p.position =  cell
  xz    = host.hardware.etalon.scan_channels/2
  yz    = 0
  y1    = max(spectra(j,*))
        ospec = reform(spectra(zidx,*))
        ospec = shift(ospec, spekplot_settings.displacements.xshift)
        yr    = [min(ospec), max(ospec)]
        if spekplot_settings.displacements.show_background then yr(0) = 0.
      plot, ospec, color=host.colors.white, xstyle=5, ystyle=5, /noerase, $
     yrange=yr;, psym=1, symsize=0.25
  axis, xaxis=0, xstyle=1, color=host.colors.white, xticklen=.07, $
     xtickv = [0,31,63,95,127], xticks = 4, $
     xtickname = [' ',' ',' ',' ',' ']
        oplot, [xz, xz], [min(ospec), max(ospec)], color=host.colors.white
        

  !p.position =  0
    endfor
 
;---Check if we need to make a GIF file:
    ;sdi2k_plugin_gif, info, js_time=timlimz(1)
end

;==========================================================================================
;   Cleanup jobs:
pro sdi2k_math_spekplot_specific_cleanup, widid
@sdi2kinc.pro
    ncdf_close, host.netcdf(0).ncid
    host.netcdf(0).ncid = -1
end

;==========================================================================================
; This is the (required) "autorun" method for this McObject. If no autorun action is 
; needed, then this routine should simply exit with no action:

pro sdi2k_math_spekplot_autorun, instance
@sdi2kinc.pro
    common spekplot_tlist, tlist
    device, get_screen_size=box
    instance.geometry.xsize = 0.95*min(box)
    instance.geometry.ysize = 0.95*min(box)
    instance.automation.timer_interval = 1.
    instance.automation.timer_ticking = 0
    sdi2k_reset_spectra
    if instance.behavior.prompt_for_filename then begin
       spekfile = dialog_pickfile(file=skyfile, $
                                 filter='*.' + host.operation.header.site_code, $
                                 group=widx, title='Select a file of sky spectra: ', $
                                 path=host.operation.logging.log_directory)                                 
    endif

    sdi2k_ncopen, spekfile, ncid, 0
    sdi2k_build_zone_map, canvas_size = [0.95*min(box), 0.95*min(box)]
    ncdf_diminq, ncid, ncdf_dimid(ncid, 'Time'),    dummy,  maxrec
    record = 0
    tlist = strarr(maxrec+1)
    for rec=record,maxrec-1 do begin
        sdi2k_read_exposure, ncid, rec
        tcen = host.programs.spectra.start_time + host.programs.spectra.integration_seconds/2
        hhmm = dt_tm_mk(js2jd(0d)+1, tcen, format='h$:m$')
        tlist(rec) =  hhmm
    endfor
    tlist(maxrec) = 'Done'
    
    mc_menu, extra_menu, 'View',           1, event_handler='sdi2k_math_spekplot_event', /new
    mc_menu, extra_menu, 'Next',           0, event_handler='sdi2k_math_spekplot_event'
    mc_menu, extra_menu, 'Previous',       0, event_handler='sdi2k_math_spekplot_event'
    mc_menu, extra_menu, 'Time Chooser',   0, event_handler='sdi2k_math_spekplot_event'
    mc_menu, extra_menu, 'Movie',          0, event_handler='sdi2k_math_spekplot_event'    
    mc_menu, extra_menu, 'Redraw',         2, event_handler='sdi2k_math_spekplot_event'
    mnu_xwindow_autorun, instance, topname='sdi2ka_top', extra_menu=extra_menu
     
    sdi2k_math_spekplot_plot, instance.description
 
end

;==========================================================================================
; This is the (required) class method for creating a new instance of the sdi2k_math_spekplot object. It
; would normally be an empty procedure.  Nevertheless, it MUST be present, as the last procedure in 
; the methods file, and it MUST have the same name as the methods file.  By calling this
; procedure, the caller forces all preceeding routines in the methods file to be compiled, 
; and so become available for subsequent use:

pro sdi2k_math_spekplot
end

