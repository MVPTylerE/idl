; >>>> begin comments
;==========================================================================================
;
; >>>> McObject Class: sdi2k_math_scatplot
;
; This file contains the McObject method code for sdi2k_math_scatplot objects:
;
; Mark Conde Fairbanks, November 2000.
;
; >>>> end comments
; >>>> begin declarations
;         menu_name = Scatter Plot Fit Results
;        class_name = sdi2k_math_scatplot
;       description = SDI Analysis - Scatter Plots
;           purpose = SDI analysis
;       idl_version = 5.2
;  operating_system = Windows NT4.0 terminal server 
;            author = Mark Conde
; >>>> end declarations

@sdi2k_ncdf.pro

;==========================================================================================
; This is the (required) "new" method for this McObject:

pro sdi2k_math_scatplot_new, instance, dynamic=dyn, creator=cmd
;---First, properties specific to this object:
    cmd = 'instance = {sdi2k_math_scatplot, '
    cmd = cmd + 'specific_cleanup: ''sdi2k_math_scatplot_specific_cleanup'', '    
    plotting = {plotting, prompt_for_filename: 1, $
                              skip_old_fits: 1, $
                         exit_on_completion: 1, $
                          menu_configurable: 1, $
                              user_editable: [0,1,2]} 
    cmd = cmd + 'plotting: plotting, '
;---Now add fields common to all SDI objects. These will be grouped as sub-structures:
    sdi2k_common_fields, cmd, automation=automation, geometry=geometry
;---Next, add the required fields, whose specifications are read from the 'declarations'
;   section of the comments at the top of this file:
    whoami, dir, file    
    obj_reqfields, dir+file, cmd, dynamic=dyn
;---Now, create the instance:
    status = execute(cmd)
end

;==========================================================================================
; This is the event handler for events generated by the sdi2k_math_scatplot object:
pro sdi2k_math_scatplot_event, event
    widget_control, event.top, get_uvalue=info
    wid_pool, 'Settings: ' + info.wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=scatplot_settings
    if widget_info(event.id, /valid_id) and scatplot_settings.automation.show_on_refresh then widget_control, event.id, /show

;---Check for a timer tick:    
    if tag_names(event, /structure_name) eq 'WIDGET_TIMER' then begin
       sdi2k_math_scatplot_tik, info.wtitle
       if scatplot_settings.automation.timer_ticking then widget_control, widx, timer=scatplot_settings.automation.timer_interval
       return
    endif
    
;---Get the menu name for this event:
    widget_control, event.id, get_uvalue=menu_item
    if n_elements(menu_item) eq 0 then menu_item = 'Nothing valid was selected'
end

;==========================================================================================
; This is the routine that handles timer ticks:
pro sdi2k_math_scatplot_tik, wtitle, redraw=redraw, _extra=_extra
@sdi2kinc.pro
end

pro sdi2k_scatplot_wot, resarr, par, zspec
@sdi2kinc.pro
    zspec = 'Done'
    par = 0
    nz = total(host.operation.zones.sectors(0:host.operation.zones.fov_rings-1))
    for j=0, n_tags(resarr(0))-1 do begin
        if n_elements(resarr(0).(j)) eq nz then begin
           if n_elements(skies) eq 0 then skies = j else skies = [skies, j]
        endif
    endfor
    skynames = tag_names(resarr(0))
    skynames = sentence_case(skynames(skies))
    mcchoice, 'Select an X parameter:', [skynames, 'Done'], choice
    if choice.name eq 'Done' then return
    par = skies(choice.index)
    mcchoice, 'Select a Y parameter:', [skynames, 'Done'], choice
    if choice.name eq 'Done' then return
    par = [par, skies(choice.index)]
    mcchoice, 'Select zone usage:', ['All', 'Zenith', 'Median', 'Done'], choice
    zspec = choice.name
end

pro sdi2k_scatplot_data, resarr, par, zspec, instance
@sdi2kinc.pro
;---Get settings information for this instance of the output xwindow and this instance of 
;   the plot program itself:
    widx = instance.id
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=info
    wid_pool, 'Settings: ' + instance.description, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=scatplot_settings

    if !d.name ne 'Z' and !d.name ne 'PS' then wset, info.wid
    nz = total(host.operation.zones.sectors(0:host.operation.zones.fov_rings-1))

;---Get arrays of the required parameter values:
    nres = n_elements(resarr)
    xvals = resarr.(par(0))(0)
    if zspec eq 'Median' then begin
       for j=0,nres-1 do begin
           xvals(j) = median(resarr(j).(par(0)))
       endfor
    endif
    if zspec eq 'All' then xvals = resarr.(par(0))
    yvals = resarr.(par(1))(0)
    if zspec eq 'Median' then begin
       for j=0,nres-1 do begin
           yvals(j) = median(resarr(j).(par(1)))
       endfor
    endif
    if zspec eq 'All' then yvals = resarr.(par(1))

;---Build the X-axis title:
    xlog=0
    xtit = tag_names(resarr(0))
    xtit = sentence_case(xtit(par(0)))
    if xtit eq 'Signal2noise' then begin
       xlog = 1
       xtit = 'Signal to noise ratio'
    endif

;---And add units to the ytitle if possible: 
    unipar = where(strpos(tag_names(resarr(0)), 'UNITS_' + strupcase(xtit)) ge 0, nn)
    xunitz  = ' ' 
    if nn gt 0 then xunitz = ' [' + resarr(0).(unipar(0)) + ']'

;---Build the Y-axis title:
    ylog=0
    ytit = tag_names(resarr(0))
    ytit = sentence_case(ytit(par(1)))
    if ytit eq 'Signal2noise' then begin
       ylog = 1
       ytit = 'Signal to noise ratio'
    endif

;---And add units to the ytitle if possible: 
    unipar = where(strpos(tag_names(resarr(0)), 'UNITS_' + strupcase(ytit)) ge 0, nn)
    yunitz  = ' ' 
    if nn gt 0 then yunitz = ' [' + resarr(0).(unipar(0)) + ']'
 
    erase, color=host.colors.white
    plot, reform(xvals), reform(yvals), /noerase, color=host.colors.black, /xstyle, /ystyle, $
          xthick=2, ythick=2, charsize=1.5, charthick=2, psym=1, symsize=0.3, $
          title=host.operation.header.site + ': ' + dt_tm_mk(js2jd(0d)+1, resarr(0).start_time, format='0d$-n$-Y$'), $
          xtitle=zspec + ' ' + xtit + xunitz, $
          ytitle=zspec + ' ' + ytit + yunitz, xlog=xlog, ylog=ylog

;---Check if we need to make a GIF file:
    ;sdi2k_plugin_gif, info, js_time=timlimz(1)
end

;==========================================================================================
;   Cleanup jobs:
pro sdi2k_math_scatplot_specific_cleanup, widid
@sdi2kinc.pro
end

;==========================================================================================
; This is the (required) "autorun" method for this McObject. If no autorun action is 
; needed, then this routine should simply exit with no action:

pro sdi2k_math_scatplot_autorun, instance
@sdi2kinc.pro
    instance.geometry.xsize = 950
    instance.geometry.ysize = 950
    instance.automation.timer_interval = 1.
    instance.automation.timer_ticking = 0
    sdi2k_reset_spectra
    mnu_xwindow_autorun, instance, topname='sdi2ka_top'
    
    if instance.plotting.prompt_for_filename then begin
       fitfile = dialog_pickfile(file=fitfile, $
                                 filter='*.' + host.operation.header.site_code, $
                                 group=widx, title='Select a file of sky spectra: ', $
                                 path=host.operation.logging.log_directory)                                 
    endif

    sdi2k_ncopen, fitfile, ncid, 0
    sdi2k_build_fitres, ncid, resarr
    sdi2k_drift_correct, resarr, source_file=fitfile
    sdi2k_physical_units, resarr
    ncdf_close, ncid
    host.netcdf(0).ncid = -1

    sdi2k_scatplot_wot, resarr, par, zspec
    while zspec ne 'Done' do begin
       sdi2k_scatplot_data, resarr, par, zspec, instance
       sdi2k_scatplot_wot,  resarr, par, zspec
       wait, 0.1
    endwhile
 
    if instance.plotting.exit_on_completion then wid_pool, instance.description, widx, /destroy
end

;==========================================================================================
; This is the (required) class method for creating a new instance of the sdi2k_math_scatplot object. It
; would normally be an empty procedure.  Nevertheless, it MUST be present, as the last procedure in 
; the methods file, and it MUST have the same name as the methods file.  By calling this
; procedure, the caller forces all preceeding routines in the methods file to be compiled, 
; and so become available for subsequent use:

pro sdi2k_math_scatplot
end

