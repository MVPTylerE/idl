; >>>> begin comments
;==========================================================================================
;
; >>>> McObject Class: sdi2k_prog_vidctl
;
; This file contains the McObject method code for sdi2k_prog_vidctl objects:
;
; Mark Conde (Mc), Fairbanks, Septemebr 2000.
;
; >>>> end comments
; >>>> begin declarations
;         menu_name = Video Control Panel
;        class_name = sdi2k_prog_vidctl
;       description = SDI Program - Video Control Panel
;           purpose = SDI operation
;       idl_version = 5.2
;  operating_system = Windows NT4.0 terminal server 
;            author = Mark Conde
; >>>> end declarations


;==========================================================================================
; This is the (required) "new" method for this McObject:

pro sdi2k_prog_vidctl_new, instance, dynamic=dyn, creator=cmd
;---First, properties specific to this object:
    cmd = 'instance = {sdi2k_prog_vidctl, '
;---Now add fields common to all SDI objects. These will be grouped as sub-structures:
    sdi2k_common_fields, cmd, automation=automation, geometry=geometry
;---Next, add the required fields, whose specifications are read from the 'declarations'
;   section of the comments at the top of this file:
    whoami, dir, file    
    obj_reqfields, dir+file, cmd, dynamic=dyn
;---Now, create the instance:
    status = execute(cmd)
end

;==========================================================================================
; This is the event handler for events generated by the sdi2k_prog_vidctl object:
pro sdi2k_prog_vidctl_event, event
@sdi2kinc.pro
    widget_control, event.top, get_uvalue=info
    wid_pool, 'Settings: ' + info.wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=vidwid
    if widget_info(event.id, /valid_id) and vidwid.automation.show_on_refresh then widget_control, event.id, /show
     
;---Check for events from the various video controls:
    if event.id eq info.gain then begin
       widget_control, info.gain, get_value=widval
       host.hardware.video.gain = widval
    endif
    if event.id eq info.offset then begin
       widget_control, info.offset, get_value=widval
       host.hardware.video.offset = widval
    endif
    if event.id eq info.clamp_level then begin
       widget_control, info.clamp_level, get_value=widval
       host.hardware.video.clamp_level = widval
    endif
    if event.id eq info.lolevel then begin
       widget_control, info.lolevel, get_value=widval
       host.hardware.video.bottom_level_a2d = widval
    endif
    if event.id eq info.hilevel then begin
       widget_control, info.hilevel, get_value=widval
       host.hardware.video.top_level_a2d = widval
    endif
    if event.id eq info.cutoff then begin
       widget_control, info.cutoff, get_value=widval
       host.hardware.video.frequency_cutoff = widval
    endif
    if event.id eq info.boost then begin
       widget_control, info.boost, get_value=widval
       host.hardware.video.high_frequency_boost = widval
    endif
    if event.id eq info.cmode then begin
       host.hardware.video.clamp_mode = event.index
    endif

;---Check for a new frame event sent by the control module:
    nm      = 0
    matched = where(tag_names(event) eq 'NAME', nm)
    if nm gt 0 then begin
       if event.(matched(0)) eq 'NewFrame' then sdi2k_prog_vidctl_tik, info.wtitle
       return
    endif

end

;==========================================================================================
; This is the routine that updates the actual plot:
pro sdi2k_prog_vidctl_tik, wtitle, redraw=redraw, _extra=_extra
@sdi2kinc.pro

;---Get settings information for this instance of the output xwindow and this instance of 
;   the plot program itself:
    wid_pool, wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=info
    wid_pool, 'Settings: ' + wtitle, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=vidwid

;---Propagate any "obj_edt" settings changes across to the screen controls:
;    widget_control, info.gain,        set_value=host.hardware.video.gain
;    widget_control, info.offset,      set_value=host.hardware.video.offset    
;    widget_control, info.clamp_level, set_value=host.hardware.video.clamp_level
;    widget_control, info.lolevel,     set_value=host.hardware.video.bottom_level_a2d
;    widget_control, info.hilevel,     set_value=host.hardware.video.top_level_a2d
;    widget_control, info.cutoff,      set_value=host.hardware.video.frequency_cutoff
;    widget_control, info.boost,       set_value=host.hardware.video.high_frequency_boost
;    widget_control, info.cmode,       set_droplist_select=host.hardware.video.clamp_mode
    
;---------Update the MV-1000 digitizing levels:
          status = call_external(host.controller.behavior.dll_file, "SetLevels", $
                                 host.hardware.video.top_level_a2d, $
                                 host.hardware.video.bottom_level_a2d, $
                                 host.hardware.video.clamp_level, $
                                 host.hardware.video.gain, $
                                 host.hardware.video.offset, $
                                 host.hardware.video.clamp_mode, value=bytarr(5), /cdecl)
;---------Update the MV-1000 filter settings:
          status = call_external(host.controller.behavior.dll_file, "SetFilter", $
                                  host.hardware.video.frequency_cutoff, $
                                  host.hardware.video.high_frequency_boost, value=bytarr(2), /cdecl)
end

pro sdi2k_vidctl_end, dummy
@sdi2kinc.pro
    wid_pool, 'SDI Program - Video Control Panel', widx, /get
    if not(widget_info(widx, /valid_id)) then return
    wid_pool, 'SDI Program - Video Control Panel', widx, /destroy
end


;==========================================================================================
; This is the (required) "autorun" method for this McObject. If no autorun action is 
; needed, then this routine should simply exit with no action:

pro sdi2k_prog_vidctl_autorun, instance
@sdi2kinc.pro
;---Return if we already have an instance running:
    wid_pool, 'SDI Program - Video Control Panel', widx, /get
    if widget_info(widx, /valid_id) then begin
       status = dialog_message('Cannot start a second instance of the video control panel.')
       return
    endif

;---Create the control window:
    wtitle = 'SDI Program - Video Control Panel'
    wid_pool, 'sdi2k_top', widx, /get
    top = WIDGET_BASE(title=wtitle, /column, space=10)
    instance.id = top
;---Create a dummy base widget inside the top-level base for the xwindow.  We will 
;   use the user-value field of this widget to store the properties settings for this plugin:
    settings = widget_base(top, /align_center, /column, group_leader=top)
    
;---Create the bases for each control group:
    levbase    = widget_base(top, frame=1, /row)
    senbase    = widget_base(top, frame=1, /row)
    filbase    = widget_base(top, frame=1, /row)
    clambase   = widget_base(top, frame=1, /row)
    
    gainwid    = cw_fslider(senbase,  title="Gain", min=0.5,  max=2., format='(f4.1)')
    offwid     = cw_fslider(senbase,  title="Offset", min=-0.3, max=1.2, format='(f4.1)')
;                            min=host.hardware.video.offset_table(0, host.hardware.video.clamp_mode), $
;                            max=host.hardware.video.offset_table(1, host.hardware.video.clamp_mode))
    lolevwid   = cw_fslider(levbase,  title="Digitization Low Level",  min=0.,  max=255., format='(i3)')
    hilevwid   = cw_fslider(levbase,  title="Digitization High Level", min=0.,  max=255., format='(i3)')
    cutwid     = cw_fslider(filbase,  title="Filter Cutoff", min=42.,  max=127., format='(i3)')
    boostwid   = cw_fslider(filbase,  title="High Frequency Boost", min=0.,  max=127., format='(i3)')
    clevwid    = cw_fslider(clambase, title="Clamp Level", min=0.,  max=255., format='(i3)')
    cmodewid   = widget_droplist(clambase, title=" ", $
                                 value = ['No clamping', 'Clamp on back porch', 'Clamp on sync tip'])
    
    info = {wtitle: wtitle, gain: gainwid, offset: offwid, clamp_level: clevwid, $
         lolevel: lolevwid, hilevel: hilevwid, cutoff: cutwid, boost: boostwid, cmode: cmodewid}

    widget_control, info.gain,        set_value=host.hardware.video.gain
    widget_control, info.offset,      set_value=host.hardware.video.offset    
    widget_control, info.clamp_level, set_value=host.hardware.video.clamp_level
    widget_control, info.lolevel,     set_value=host.hardware.video.bottom_level_a2d
    widget_control, info.hilevel,     set_value=host.hardware.video.top_level_a2d
    widget_control, info.cutoff,      set_value=host.hardware.video.frequency_cutoff
    widget_control, info.boost,       set_value=host.hardware.video.high_frequency_boost
    widget_control, info.cmode,       set_droplist_select=host.hardware.video.clamp_mode
    
    widget_control, top, set_uvalue=info

;---Register the plot xwindow name and top-level widget index with "wid_pool":
    widget_control, top, get_uvalue=info
    wid_pool, info.wtitle, top, /add

    widget_control, top, /realize
    xmanager, 'sdi2k_prog_vidctl', top, group_leader=widx, cleanup='sdi2k_vidctl_end', /no_block

    wid_pool, 'Settings: ' + info.wtitle, settings, /add
    widget_control, settings, set_uvalue=instance
end

;==========================================================================================
; This is the (required) class method for creating a new instance of the sdi2k_prog_vidctl object. It
; would normally be an empty procedure.  Nevertheless, it MUST be present, as the last procedure in 
; the methods file, and it MUST have the same name as the methods file.  By calling this
; procedure, the caller forces all preceeding routines in the methods file to be compiled, 
; and so become available for subsequent use:

pro sdi2k_prog_vidctl
end

