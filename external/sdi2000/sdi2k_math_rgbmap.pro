; >>>> begin comments
;==========================================================================================
;
; >>>> McObject Class: sdi2k_math_rgbmap
;
; This file contains the McObject method code for sdi2k_math_rgbmap objects:
;
; Mark Conde Fairbanks, October 2000.
;
; >>>> end comments
; >>>> begin declarations
;         menu_name = RGB Map Plotter
;        class_name = sdi2k_math_rgbmap
;       description = SDI Analysis - Plot RGB Skymaps
;           purpose = SDI analysis
;       idl_version = 5.2
;  operating_system = Windows NT4.0 terminal server
;            author = Mark Conde
; >>>> end declarations

@sdi2k_ncdf.pro

;==========================================================================================
; This is the (required) "new" method for this McObject:

pro sdi2k_math_rgbmap_new, instance, dynamic=dyn, creator=cmd
;---First, properties specific to this object:
    common rgbmap_resarr, resarr, smootharr
    cmd = 'instance = {sdi2k_math_rgbmap, '
    cmd = cmd + 'specific_cleanup: ''sdi2k_math_rgbmap_specific_cleanup'', '
    rgbmap_behavior = {rgbmap_behavior, prompt_for_filename: 1, $
                          menu_configurable: 0, $
                              user_editable: [1]}
    rgbmap_scale = {rgbmap_scale, auto_scale: 0, $
                                      yrange: [[-200., 200.], [0., 1000.], [0., 400.]], $
                           menu_configurable: 1, $
                               user_editable: [0,1]}
    rgbmap_geom  = {rgbmap_geom, viewing_from_above: 0, $
                              radius_maps_to_distance: 0, $
                                       north_rotation: 0, $
                                    menu_configurable: 1, $
                                        user_editable: [0,1,2]}     
    rex = [0, n_elements(resarr)-1]
    smoothing = {rgbmap_smoothing,     wind_time_smoothing: 0.7, $
                                    wind_spatial_smoothing: 0.05, $
                                temperature_time_smoothing: 1., $
                             temperature_spatial_smoothing: 0.08, $
                                  intensity_time_smoothing: 1., $
                               intensity_spatial_smoothing: 0.08, $
                                menu_configurable: 1, $
                                    user_editable: [0,1,2,3]}

    cmd = cmd + 'behavior: rgbmap_behavior, '
    cmd = cmd + 'scale: rgbmap_scale, '
    cmd = cmd + 'smooth_settings: smoothing, '
    cmd = cmd + 'black_bgnd: 1, '
    cmd = cmd + 'parameter: [4, 5, 6], '
    cmd = cmd + 'map_view: rgbmap_geom, '
    cmd = cmd + 'records: rex, '
;---Now add fields common to all SDI objects. These will be grouped as sub-structures:
    sdi2k_common_fields, cmd, automation=automation, geometry=geometry
;---Next, add the required fields, whose specifications are read from the 'declarations'
;   section of the comments at the top of this file:
    whoami, dir, file
    obj_reqfields, dir+file, cmd, dynamic=dyn
;---Now, create the instance:
    status = execute(cmd)
end

;==========================================================================================
; This is the event handler for events generated by the sdi2k_math_rgbmap object:
pro sdi2k_math_rgbmap_event, event
    common rgbmap_tlist, tlist, datestr
    common rgbmap_resarr, resarr, smootharr
    widget_control, event.top, get_uvalue=info
    wid_pool, 'Settings: ' + info.wtitle, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=rgbmap_settings
    if widget_info(event.id, /valid_id) and rgbmap_settings.automation.show_on_refresh then widget_control, event.id, /show

;---Check for a timer tick:
    if tag_names(event, /structure_name) eq 'WIDGET_TIMER' then begin
       sdi2k_math_rgbmap_tik, info.wtitle
       if rgbmap_settings.automation.timer_ticking then widget_control, sidx, timer=rgbmap_settings.automation.timer_interval
       return
    endif

;---Get the menu name for this event:
    widget_control, event.id, get_uvalue=menu_item

    if menu_item eq 'View|Time Chooser' then begin
       mcchoice, 'Start time:', tlist, choice
       rgbmap_settings.records(0) = choice.index
       mcchoice, 'End time:', tlist, choice
       rgbmap_settings.records(1) = choice.index
       widget_control, sidx, set_uvalue=rgbmap_settings
    endif

    if menu_item eq 'View|Smooth Winds' then begin
       wot = resarr(rgbmap_settings.records(0):rgbmap_settings.records(1)).velocity
       print, 'Smoothing Winds in Time...'
       sdi2k_timesmooth_fits, wot, rgbmap_settings.smooth_settings.wind_time_smoothing, /progress
       print, 'Smoothing Winds in Space...'
       sdi2k_spacesmooth_fits, wot, rgbmap_settings.smooth_settings.wind_spatial_smoothing, /progress
       smootharr(rgbmap_settings.records(0):rgbmap_settings.records(1)).velocity = wot
    endif

    if menu_item eq 'View|Smooth Temperatures' then begin
       wot = resarr(rgbmap_settings.records(0):rgbmap_settings.records(1)).temperature
       print, 'Smoothing Temperatures in Time...'
       sdi2k_timesmooth_fits, wot, rgbmap_settings.smooth_settings.temperature_time_smoothing, /progress
       print, 'Smoothing Temperatures in Space...'
       sdi2k_spacesmooth_fits, wot, rgbmap_settings.smooth_settings.temperature_spatial_smoothing, /progress
       smootharr(rgbmap_settings.records(0):rgbmap_settings.records(1)).temperature = wot
    endif

    if menu_item eq 'View|Smooth Intensities' then begin
       wot = resarr(rgbmap_settings.records(0):rgbmap_settings.records(1)).intensity
       print, 'Smoothing Intensities in Time...'
       sdi2k_timesmooth_fits, wot, rgbmap_settings.smooth_settings.intensity_time_smoothing, /progress
       print, 'Smoothing Inten in Space...'
       sdi2k_spacesmooth_fits, wot, rgbmap_settings.smooth_settings.intensity_spatial_smoothing, /progress
       smootharr(rgbmap_settings.records(0):rgbmap_settings.records(1)).intensity = wot
    endif

    if menu_item eq 'View|Toggle Background Color' then begin
       rgbmap_settings.black_bgnd = 1 - rgbmap_settings.black_bgnd
       widget_control, sidx, set_uvalue=rgbmap_settings
    endif

    if menu_item eq 'View|Plot Parameter' then sdi2k_rgbmap_getpar, info.wtitle
    sdi2k_math_rgbmap_plot, info.wtitle
    if n_elements(menu_item) eq 0 then menu_item = 'Nothing valid was selected'
end


;==========================================================================================
; This is the routine that handles timer ticks:
pro sdi2k_math_rgbmap_tik, wtitle, redraw=redraw, _extra=_extra
    sdi2k_math_rgbmap_plot, wtitle
@sdi2kinc.pro
end

pro sdi2k_rgbmap_getpar, wtitle
@sdi2kinc.pro
    common rgbmap_resarr, resarr, smootharr

    wid_pool, wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=info
    wid_pool, 'Settings: ' + wtitle, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=rgbmap_settings

    nz = total(host.operation.zones.sectors(0:host.operation.zones.fov_rings-1))
    for j=0, n_tags(resarr(0))-1 do begin
        if n_elements(resarr(0).(j)) eq nz then begin
           if n_elements(skies) eq 0 then skies = j else skies = [skies, j]
        endif
    endfor
    skynames = tag_names(resarr(0))
    skynames = sentence_case(skynames(skies))
    
    colortype = ['Red-Blue', 'Green', 'Purple']
    
    for j=0,2 do begin
	mcchoice, 'Parameter for ' + colortype(j) + ' Hues?', skynames, choice
	rgbmap_settings.parameter(j) = skies(choice.index)
	case choice.name of
	   'Velocity':    begin
			  rgbmap_settings.scale.auto_scale = 0
			  rgbmap_settings.scale.yrange(*,j) = [-150., 150.]
			  end
	   'Temperature': begin
			  rgbmap_settings.scale.auto_scale = 0
			  rgbmap_settings.scale.yrange(*,j) = [200., 700.]
			  end
	   'Intensity':   begin
			  rgbmap_settings.scale.auto_scale = 0
			  rgbmap_settings.scale.yrange(*,j) = [0., 500.]
			  end
	    else:         begin
			  rgbmap_settings.scale.auto_scale = 1
			  end
	endcase
    endfor
    widget_control, sidx, set_uvalue=rgbmap_settings
end


;===========================================================================================
;
;   This does the actual plotting:

pro sdi2k_math_rgbmap_plot, wtitle
@sdi2kinc.pro
    common rgbmap_resarr, resarr, smootharr
    common rgbmap_tlist,  tlist, datestr
;---Get settings information for this instance of the output xwindow and this instance of
;   the plot program itself:
    wid_pool, wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=info
    wid_pool, 'Settings: ' + wtitle, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=rgbmap_settings

    if n_elements(zone_canvas) eq 0 then return

    if !d.name ne 'Z' and !d.name ne 'PS' then wset, info.wid

    sdi2k_sky_rgbmap, tlist, tcen, datestr, smootharr, rgbmap_settings, $
                      map_view=rgbmap_settings.map_view.viewing_from_above, $
                      azimuth_rotation=rgbmap_settings.map_view.north_rotation


;---Check if we need to make a GIF file:
    ;sdi2k_plugin_gif, info, js_time=timlimz(1)
end

;==========================================================================================
;   Cleanup jobs:
pro sdi2k_math_rgbmap_specific_cleanup, widid
@sdi2kinc.pro
    close, /all
;    ncdf_close, host.netcdf(0).ncid
;    host.netcdf(0).ncid = -1
end

;==========================================================================================
; This is the (required) "autorun" method for this McObject. If no autorun action is
; needed, then this routine should simply exit with no action:

pro sdi2k_math_rgbmap_autorun, instance
@sdi2kinc.pro
    common rgbmap_resarr, resarr, smootharr
    common rgbmap_tlist, tlist, datestr
    device, get_screen_size=box
    instance.geometry.xsize = 0.9*box(0)
    instance.geometry.ysize = 0.85*min(box) + 100
    instance.automation.timer_interval = 1.
    instance.automation.timer_ticking = 0
    if instance.behavior.prompt_for_filename then begin
       spekfile = dialog_pickfile(file=skyfile, $
                                 filter='*.' + host.operation.header.site_code, $
                                 group=widx, title='Select a file of sky spectra: ', $
                                 path=host.operation.logging.log_directory)
    endif

    sdi2k_ncopen, spekfile, ncid, 0
    if n_elements(resarr) gt 0 then undefine, resarr
    sdi2k_build_fitres, ncid, resarr
    sdi2k_drift_correct, resarr, source_file=spekfile
    sdi2k_remove_radial_residual, resarr, parname='VELOCITY'
    sdi2k_remove_radial_residual, resarr, parname='INTENSITY', /multiplicative
    sdi2k_remove_radial_residual, resarr, parname='TEMPERATURE'
    pv = resarr.intensity
    pv = pv(sort(pv))
    nv = n_elements(pv)
    resarr.intensity = resarr.intensity - pv(0.02*nv)
    sdi2k_physical_units, resarr
    smootharr = resarr
;    if n_elements(zone_map) lt 1 then sdi2k_build_zone_map, canvas_size = [0.95*min(box), 0.95*min(box)], /map_project
    sdi2k_build_zone_map, canvas_size = [0.95*min(box), 0.95*min(box)];, /map_project
    ncdf_diminq, ncid, ncdf_dimid(ncid, 'Time'),    dummy,  maxrec
    record = 0
    tlist = strarr(maxrec)
    for rec=record,maxrec-1 do begin
        sdi2k_read_exposure, ncid, rec
        tcen = host.programs.spectra.start_time + host.programs.spectra.integration_seconds/2
        hhmm = dt_tm_mk(js2jd(0d)+1, tcen, format='h$:m$')
        tlist(rec) =  hhmm
    endfor
    sdi2k_read_exposure, host.netcdf(0).ncid, 0
    ctime = host.programs.spectra.start_time + host.programs.spectra.integration_seconds/2
    datestr = dt_tm_mk(js2jd(0d)+1, ctime, format='0d$ n$ Y$')

    ncdf_close, host.netcdf(0).ncid
    host.netcdf(0).ncid = -1
    instance.records = [0, n_elements(tlist)-1]

    mc_menu, extra_menu, 'View',                    1, event_handler='sdi2k_math_rgbmap_event', /new
    mc_menu, extra_menu, 'Plot Parameter',          0, event_handler='sdi2k_math_rgbmap_event'
    mc_menu, extra_menu, 'Time Chooser',            0, event_handler='sdi2k_math_rgbmap_event'
    mc_menu, extra_menu, 'Smooth Winds',            0, event_handler='sdi2k_math_rgbmap_event'
    mc_menu, extra_menu, 'Smooth Temperatures',     0, event_handler='sdi2k_math_rgbmap_event'
    mc_menu, extra_menu, 'Smooth Intensities',      0, event_handler='sdi2k_math_rgbmap_event'
    mc_menu, extra_menu, 'Toggle Background Color', 0, event_handler='sdi2k_math_rgbmap_event'
    mc_menu, extra_menu, 'Redraw',         2, event_handler='sdi2k_math_rgbmap_event'
    mnu_xwindow_autorun, instance, topname='sdi2ka_top', extra_menu=extra_menu

    sdi2k_math_rgbmap_plot, instance.description
end

;==========================================================================================
; This is the (required) class method for creating a new instance of the sdi2k_math_rgbmap object. It
; would normally be an empty procedure.  Nevertheless, it MUST be present, as the last procedure in
; the methods file, and it MUST have the same name as the methods file.  By calling this
; procedure, the caller forces all preceeding routines in the methods file to be compiled,
; and so become available for subsequent use:

pro sdi2k_math_rgbmap
end

