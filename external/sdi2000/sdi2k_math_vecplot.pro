; >>>> begin comments
;==========================================================================================
;
; >>>> McObject Class: sdi2k_math_vecplot
;
; This file contains the McObject method code for sdi2k_math_vecplot objects:
;
; Mark Conde Fairbanks, October 2000.
;
; >>>> end comments
; >>>> begin declarations
;         menu_name = Plot Wind Vectors
;        class_name = sdi2k_math_vecplot
;       description = SDI Analysis - Vector Wind Plots
;           purpose = SDI analysis
;       idl_version = 5.2
;  operating_system = Windows NT4.0 terminal server 
;            author = Mark Conde
; >>>> end declarations

@sdi2k_ncdf.pro

;==========================================================================================
; This is the (required) "new" method for this McObject:

pro sdi2k_math_vecplot_new, instance, dynamic=dyn, creator=cmd
;---First, properties specific to this object:
    cmd = 'instance = {sdi2k_math_vecplot, '
    cmd = cmd + 'specific_cleanup: ''sdi2k_math_vecplot_specific_cleanup'', '    
    wind_plot = {wind_plot, prompt_for_filename: 1, $
                                 wind_scale: 300., $
                                orientation: 'Geographic', $
                                    columns: 10, $
                         exit_on_completion: 0, $
                          menu_configurable: 1, $
                              user_editable: [0,1,2,3,4]} 
    cmd = cmd + 'wind_plot: wind_plot, '
;---Now add fields common to all SDI objects. These will be grouped as sub-structures:
    sdi2k_common_fields, cmd, automation=automation, geometry=geometry
;---Next, add the required fields, whose specifications are read from the 'declarations'
;   section of the comments at the top of this file:
    whoami, dir, file    
    obj_reqfields, dir+file, cmd, dynamic=dyn
;---Now, create the instance:
    status = execute(cmd)
end

;==========================================================================================
; This is the event handler for events generated by the sdi2k_math_vecplot object:
pro sdi2k_math_vecplot_event, event
    widget_control, event.top, get_uvalue=info
    wid_pool, 'Settings: ' + info.wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=vecplot_settings
    if widget_info(event.id, /valid_id) and vecplot_settings.automation.show_on_refresh then widget_control, event.id, /show

;---Check for a timer tick:    
    if tag_names(event, /structure_name) eq 'WIDGET_TIMER' then begin
       sdi2k_math_vecplot_tik, info.wtitle
       if vecplot_settings.automation.timer_ticking then widget_control, widx, timer=vecplot_settings.automation.timer_interval
       return
    endif
    
;---Get the menu name for this event:
    widget_control, event.id, get_uvalue=menu_item
    if n_elements(menu_item) eq 0 then menu_item = 'Nothing valid was selected'
end

;==========================================================================================
; This is the routine that handles timer ticks:
pro sdi2k_math_vecplot_tik, wtitle, redraw=redraw, _extra=_extra
@sdi2kinc.pro
end

pro sdi2k_math_vecplot_plot, zidx, ospec, ispec, fitpars, quality, cal, instance
@sdi2kinc.pro
;---Get settings information for this instance of the output xwindow and this instance of 
;   the plot program itself:
    widx = instance.id
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=info
    wid_pool, 'Settings: ' + instance.description, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=vecplot_settings

    if n_elements(zone_canvas) eq 0 then return

;---Now plot the current spectra:
    xtwk = 0.22/host.operation.zones.fov_rings
    ytwk = 0.18/host.operation.zones.fov_rings
    edge = [0.5, 0.5]
    j=zidx
    lolef = [1.05*zone_centers(j, 0) - xtwk, zone_centers(j, 1) - ytwk] + edge
    uprgt = [1.05*zone_centers(j, 0) + xtwk, zone_centers(j, 1) + ytwk] + edge
    cell  = [lolef(0:1), uprgt(0:1)] 
    !p.position =  cell
    xz    = host.hardware.etalon.scan_channels/2
    yz    = 0
    y1    = max(spectra(j,*))
    ifun  = fitpars(0) + ispec*fitpars(2)/max(ispec)
    plot, ifun, color=host.colors.white, $
          xstyle=5, ystyle=5, /noerase, yrange=[min(ospec), max(ospec)]
    oplot,quality.fitfunc, color=host.colors.purple, thick=2
    oplot,ospec, color=host.colors.white, psym=1, symsize=0.4
    axis, xaxis=0, xstyle=1, color=greymax, xticklen=.07, $
          xtickv = [0,31,63,95,127], xticks = 4, $
          xtickname = [' ',' ',' ',' ',' ']
    !p.position =  0

;---Check if we need to make a GIF file:
    ;sdi2k_plugin_gif, info, js_time=timlimz(1)
end

;==========================================================================================
;   Cleanup jobs:
pro sdi2k_math_vecplot_specific_cleanup, widid
@sdi2kinc.pro
end

;==========================================================================================
; This is the (required) "autorun" method for this McObject. If no autorun action is 
; needed, then this routine should simply exit with no action:

pro sdi2k_math_vecplot_autorun, instance
@sdi2kinc.pro
    instance.geometry.xsize = 950
    instance.geometry.ysize = 950
    instance.automation.timer_interval = 1.
    instance.automation.timer_ticking = 0
    sdi2k_reset_spectra
    sdi2k_build_zone_map, canvas_size = [950, 950]
    mnu_xwindow_autorun, instance, topname='sdi2ka_top'
    
    skyfile = sdi2k_filename('sky')
    insfile = sdi2k_filename('ins')
    if instance.fitting.prompt_for_filename then begin
       skyfile = dialog_pickfile(file=skyfile, $
                                 filter='sky' + '*.' + host.operation.header.site_code, $
                                 group=widx, title='Select a file of sky spectra: ', $
                                 path=host.operation.logging.log_directory)                                 
       insfile = dialog_pickfile(file=insfile, $
                                 filter='ins' + '*.' + host.operation.header.site_code, $
                                 group=widx, title='Select a file of insprofs: ', $
                                 path=host.operation.logging.log_directory)                                 
    endif
    sdi2k_ncopen, skyfile, ncid, 0
    sdi2k_add_fitvars, ncid
    sdi2k_load_insprofs, insfile, insprofs, insid, 1

    ncdf_diminq, ncid, ncdf_dimid(ncid, 'Time'),    dummy,  maxrec
    record = 0
    if instance.fitting.skip_old_fits then sdi2k_skip_existing_fits, ncid, record
    for rec=record,host.netcdf(0).ncmaxrec-1 do begin
        sdi2k_read_exposure, ncid, rec
        sdi2k_fix_spekwrap
        sdi2k_fit_spectra,   ncid, rec, sig2noise, chi_squared, $
                                        sigarea, sigwid, sigpos, sigbgnd, $
                                        backgrounds, areas, widths, positions, insprofs, instance
        sdi2k_write_fitpars, ncid, rec, sig2noise, chi_squared, $
                                        sigarea, sigwid, sigpos, sigbgnd, $
                                        backgrounds, areas, widths, positions
    endfor
    ncdf_close, ncid
    host.netcdf(0).ncid = -1

    if instance.fitting.exit_on_completion then wid_pool, instance.description, widx, /destroy
end

;==========================================================================================
; This is the (required) class method for creating a new instance of the sdi2k_math_vecplot object. It
; would normally be an empty procedure.  Nevertheless, it MUST be present, as the last procedure in 
; the methods file, and it MUST have the same name as the methods file.  By calling this
; procedure, the caller forces all preceeding routines in the methods file to be compiled, 
; and so become available for subsequent use:

pro sdi2k_math_vecplot
end

