; >>>> begin comments
;==========================================================================================
;
; >>>> McObject Class: sdi2k_math_windparplot
;
; This file contains the McObject method code for sdi2k_math_windparplot objects:
;
; Mark Conde Fairbanks, November 2000.
;
; >>>> end comments
; >>>> begin declarations
;         menu_name = Wind Scalar Parameter Plotter
;        class_name = sdi2k_math_windparplot
;       description = SDI Analysis - Wind Fit Parameters
;           purpose = SDI analysis
;       idl_version = 5.2
;  operating_system = Windows NT4.0 terminal server
;            author = Mark Conde
; >>>> end declarations

@sdi2k_ncdf.pro

;==========================================================================================
; This is the (required) "new" method for this McObject:

pro sdi2k_math_windparplot_new, instance, dynamic=dyn, creator=cmd
;---First, properties specific to this object:
    cmd = 'instance = {sdi2k_math_windparplot, '
    cmd = cmd + 'specific_cleanup: ''sdi2k_math_windparplot_specific_cleanup'', '
    windparplot_behavior = {windparplot_behavior, prompt_for_filename: 1, $
                           menu_configurable: 1, $
                               user_editable: [0]}
    windparplot_scale = {windparplot_scale, auto_scale: 1, $
                                      yrange: [0., 1.], $
                           menu_configurable: 1, $
                               user_editable: [0,1]}
    windparplot_hwm  = {windparplot_hwm, plot_hwm: 1, $
                                      f10pt7: 150., $
                                          ap: 15., $
                                 hwm_height: 240., $
                           menu_configurable: 1, $
                               user_editable: [0,1,2,3]} 

    cmd = cmd + 'behavior: windparplot_behavior, '
    cmd = cmd + 'scale: windparplot_scale, '
    cmd = cmd + 'parameter: 4, '
    cmd = cmd + 'hwm: windparplot_hwm, '

;---Now add fields common to all SDI objects. These will be grouped as sub-structures:
    sdi2k_common_fields, cmd, automation=automation, geometry=geometry
;---Next, add the required fields, whose specifications are read from the 'declarations'
;   section of the comments at the top of this file:
    whoami, dir, file
    obj_reqfields, dir+file, cmd, dynamic=dyn
;---Now, create the instance:
    status = execute(cmd)
end

;==========================================================================================
; This is the event handler for events generated by the sdi2k_math_windparplot object:
pro sdi2k_math_windparplot_event, event
    widget_control, event.top, get_uvalue=info
    wid_pool, 'Settings: ' + info.wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=windparplot_settings
    if widget_info(event.id, /valid_id) and windparplot_settings.automation.show_on_refresh then widget_control, event.id, /show

;---Check for a timer tick:
    if tag_names(event, /structure_name) eq 'WIDGET_TIMER' then begin
       sdi2k_math_windparplot_tik, info.wtitle
       if windparplot_settings.automation.timer_ticking then widget_control, widx, timer=windparplot_settings.automation.timer_interval
       return
    endif

;---Get the menu name for this event:
    widget_control, event.id, get_uvalue=menu_item

    if menu_item eq 'View|Plot Parameter' then sdi2k_windparplot_getpar, info.wtitle
    if menu_item eq 'View|Zone Usage'     then sdi2k_windparplot_zones,  info.wtitle
    sdi2k_windparplot_data, info.wtitle
    if n_elements(menu_item) eq 0 then menu_item = 'Nothing valid was selected'
end

;==========================================================================================
; This is the routine that handles timer ticks:
pro sdi2k_math_windparplot_tik, wtitle, redraw=redraw, _extra=_extra
@sdi2kinc.pro
    sdi2k_windparplot_data, wtitle
end

pro sdi2k_windparplot_getpar, wtitle
@sdi2kinc.pro
    common windparplot_resarr, resarr

    wid_pool, wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=info
    wid_pool, 'Settings: ' + wtitle, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=windparplot_settings

    skynames = tag_names(resarr(0))
    skynames = sentence_case(skynames(3:11))
    mcchoice, 'Select a parameter:', skynames, choice
    windparplot_settings.parameter = choice.index+3
    widget_control, sidx, set_uvalue=windparplot_settings
end

pro sdi2k_windparplot_data, wtitle
@sdi2kinc.pro
    common windparplot_resarr, resarr
;---Get settings information for this instance of the output xwindow and this instance of
;   the plot program itself:
    wid_pool, wtitle, widx, /get
    if not(widget_info(widx, /valid_id)) then return
    widget_control, widx, get_uvalue=info
    wid_pool, 'Settings: ' + wtitle, sidx, /get
    if not(widget_info(sidx, /valid_id)) then return
    widget_control, sidx, get_uvalue=windparplot_settings

    if !d.name ne 'Z' and !d.name ne 'PS' then wset, info.wid

    sdi2k_wpar_plotter, tlist, tcen, datestr, resarr, windparplot_settings

;---Check if we need to make a GIF file:
    ;sdi2k_plugin_gif, info, js_time=timlimz(1)
end

;==========================================================================================
;   Cleanup jobs:
pro sdi2k_math_windparplot_specific_cleanup, widid
@sdi2kinc.pro
end

;==========================================================================================
; This is the (required) "autorun" method for this McObject. If no autorun action is
; needed, then this routine should simply exit with no action:

pro sdi2k_math_windparplot_autorun, instance
@sdi2kinc.pro
    common windparplot_resarr, resarr
    device, get_screen_size=box
    instance.geometry.xsize = 0.95*box(0)
    instance.geometry.ysize = 0.75*box(1)
    instance.automation.timer_interval = 1.
    instance.automation.timer_ticking = 0
    sdi2k_reset_spectra

    if instance.behavior.prompt_for_filename then begin
       fitfile = dialog_pickfile(file=fitfile, $
                                 filter='sky*.' + host.operation.header.site_code, $
                                 group=widx, title='Select a file of sky spectra: ', $
                                 path=host.operation.logging.log_directory)
    endif

    sdi2k_ncopen, fitfile, ncid, 0
    sdi2k_build_fitres, ncid, rarr
    sdi2k_build_windres, ncid, windfit
    sdi2k_build_1dwindpars, windfit, rarr, resarr
    ncdf_close, ncid
    host.netcdf(0).ncid = -1

    mc_menu, extra_menu, 'View',           1, event_handler='sdi2k_math_windparplot_event', /new
    mc_menu, extra_menu, 'Plot Parameter', 0, event_handler='sdi2k_math_windparplot_event'
    mc_menu, extra_menu, 'Redraw',         2, event_handler='sdi2k_math_windparplot_event'
    mnu_xwindow_autorun, instance, topname='sdi2ka_top', extra_menu=extra_menu

    sdi2k_windparplot_getpar, instance.description
    sdi2k_windparplot_data,   instance.description
 end

;==========================================================================================
; This is the (required) class method for creating a new instance of the sdi2k_math_windparplot object. It
; would normally be an empty procedure.  Nevertheless, it MUST be present, as the last procedure in
; the methods file, and it MUST have the same name as the methods file.  By calling this
; procedure, the caller forces all preceeding routines in the methods file to be compiled,
; and so become available for subsequent use:

pro sdi2k_math_windparplot
end

